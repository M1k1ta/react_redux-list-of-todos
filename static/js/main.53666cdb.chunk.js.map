{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","types/Status.ts","components/TodoComponent/TodoComponent.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","startFilters","filterReducer","filters","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Status","TodoComponent","React","memo","setIsLoading","todoAmount","dispatch","handleDetailsOpen","userId","user","id","title","completed","className","classNames","onClick","TodoList","map","TodoFilter","onQueryChange","text","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","href","email","name","App","useState","isLoading","loadTodos","a","todosFromServer","useEffect","visibleTodos","useMemo","lowerTitle","toLowerCase","lowerQuery","trim","result","includes","active","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53666cdb.chunk.js","sourcesContent":["import { TodoWithUser } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: TodoWithUser;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: TodoWithUser): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = TodoWithUser | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type FilterQueryAction = { type: 'filter/QUERY', query: string };\ntype FilterStatusAction = { type: 'filter/STATUS', status: string };\n\ntype Action = FilterQueryAction | FilterStatusAction;\n\nconst setQueryFilter = (query: string): FilterQueryAction => ({\n  type: 'filter/QUERY',\n  query,\n});\nconst setStatusFilter = (status: string): FilterStatusAction => ({\n  type: 'filter/STATUS',\n  status,\n});\n\nexport const actions = { setQueryFilter, setStatusFilter };\n\nconst startFilters = { query: '', status: 'all' };\n\nconst filterReducer = (\n  filters = startFilters,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return { ...filters, query: action.query };\n    case 'filter/STATUS':\n      return { ...filters, status: action.status };\n    default:\n      return filters;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodosAction = { type: 'todos/GET', todos: Todo[] };\n\nconst setTodo = (todos: Todo[]): TodosAction => ({\n  type: 'todos/GET',\n  todos,\n});\n\nexport const actions = { setTodo };\n\nconst todosReducer = (todos: Todo[] = [], action: TodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/GET':\n      return action.todos;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Status {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo;\n  setIsLoading: (value: boolean) => void;\n}\n\nexport const TodoComponent: FC<Props> = React.memo(({\n  todo,\n  setIsLoading,\n}) => {\n  const todoAmount = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleDetailsOpen = (currentTodo: Todo) => {\n    setIsLoading(true);\n    getUser(currentTodo.userId).then(user => dispatch(actions.setTodo({\n      ...currentTodo,\n      user,\n    })));\n  };\n\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleDetailsOpen(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': todoAmount?.id !== todo.id,\n                'fa-eye-slash': todoAmount?.id === todo.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoComponent } from '../TodoComponent/TodoComponent';\n\ninterface Props {\n  todos: Todo[];\n  setIsLoading: (value: boolean) => void;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  setIsLoading,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          return (\n            <TodoComponent\n              todo={todo}\n              key={todo.id}\n              setIsLoading={setIsLoading}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = React.memo(() => {\n  const filters = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const onQueryChange = (text: string) => {\n    dispatch(actions.setQueryFilter(text));\n  };\n\n  const onOptionChange = (status: string) => {\n    dispatch(actions.setStatusFilter(status));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filters.status}\n            onChange={(event) => onOptionChange(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filters.query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {filters.query && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ninterface Props {\n  setIsLoading: (value: boolean) => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ setIsLoading }) => {\n  const todo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleClose = () => {\n    setIsLoading(false);\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!todo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {(todo.completed)\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${todo.user.email}'}`}>\n                {todo.user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Status } from './types/Status';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n// import { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const filters = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  const loadTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(actions.setTodo(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => todos.filter(({ title, completed }) => {\n    const lowerTitle = title.toLowerCase();\n    const lowerQuery = filters.query.toLowerCase().trim();\n    const result = lowerTitle.includes(lowerQuery);\n\n    switch (filters.status) {\n      case Status.active:\n        return result && !completed;\n      case Status.completed:\n        return result && completed;\n\n      default:\n        return result;\n    }\n  }), [todos, filters.query, filters.status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    setIsLoading={setIsLoading}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isLoading && (\n        <TodoModal\n          setIsLoading={setIsLoading}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}